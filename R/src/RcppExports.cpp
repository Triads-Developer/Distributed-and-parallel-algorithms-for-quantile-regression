// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// timesTwo
NumericVector timesTwo(NumericVector x);
RcppExport SEXP _QPADMslack_timesTwo(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(timesTwo(x));
    return rcpp_result_gen;
END_RCPP
}
// sumArrayItems
double sumArrayItems(arma::vec xa);
RcppExport SEXP _QPADMslack_sumArrayItems(SEXP xaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type xa(xaSEXP);
    rcpp_result_gen = Rcpp::wrap(sumArrayItems(xa));
    return rcpp_result_gen;
END_RCPP
}
// soloSumArrayItems
double soloSumArrayItems(arma::vec xa);
RcppExport SEXP _QPADMslack_soloSumArrayItems(SEXP xaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type xa(xaSEXP);
    rcpp_result_gen = Rcpp::wrap(soloSumArrayItems(xa));
    return rcpp_result_gen;
END_RCPP
}
// paraSumArrayItems
double paraSumArrayItems(arma::vec xa, int partitions);
RcppExport SEXP _QPADMslack_paraSumArrayItems(SEXP xaSEXP, SEXP partitionsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type xa(xaSEXP);
    Rcpp::traits::input_parameter< int >::type partitions(partitionsSEXP);
    rcpp_result_gen = Rcpp::wrap(paraSumArrayItems(xa, partitions));
    return rcpp_result_gen;
END_RCPP
}
// invertLongMatrixWithXk
Rcpp::List invertLongMatrixWithXk(arma::mat x, int p, int nk, int k);
RcppExport SEXP _QPADMslack_invertLongMatrixWithXk(SEXP xSEXP, SEXP pSEXP, SEXP nkSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(invertLongMatrixWithXk(x, p, nk, k));
    return rcpp_result_gen;
END_RCPP
}
// invertShortMatrixWithXk
Rcpp::List invertShortMatrixWithXk(arma::mat x, int p, int nk, int k);
RcppExport SEXP _QPADMslack_invertShortMatrixWithXk(SEXP xSEXP, SEXP pSEXP, SEXP nkSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type p(pSEXP);
    Rcpp::traits::input_parameter< int >::type nk(nkSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(invertShortMatrixWithXk(x, p, nk, k));
    return rcpp_result_gen;
END_RCPP
}
// paraQPADMslackcpp
Rcpp::List paraQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_paraQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(paraQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}
// threadedparaQPADMslackcpp
Rcpp::List threadedparaQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_threadedparaQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(threadedparaQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}
// threadedSansJoinQPADMslackcpp
Rcpp::List threadedSansJoinQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_threadedSansJoinQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(threadedSansJoinQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}
// asyncQPADMslackcpp
Rcpp::List asyncQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_asyncQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(asyncQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}
// asyncSansGetQPADMslackcpp
Rcpp::List asyncSansGetQPADMslackcpp(arma::vec y, arma::mat x, int K, double tau, String penalty, double a, double lambda, double pho, int maxstep, double eps, bool intercept);
RcppExport SEXP _QPADMslack_asyncSansGetQPADMslackcpp(SEXP ySEXP, SEXP xSEXP, SEXP KSEXP, SEXP tauSEXP, SEXP penaltySEXP, SEXP aSEXP, SEXP lambdaSEXP, SEXP phoSEXP, SEXP maxstepSEXP, SEXP epsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< String >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type pho(phoSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(asyncSansGetQPADMslackcpp(y, x, K, tau, penalty, a, lambda, pho, maxstep, eps, intercept));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _QPADMslack_QPADMslackcpp(void *, void *, void *, void *, void *, void *, void *, void *, void *, void *);

static const R_CallMethodDef CallEntries[] = {
    {"_QPADMslack_timesTwo", (DL_FUNC) &_QPADMslack_timesTwo, 1},
    {"_QPADMslack_sumArrayItems", (DL_FUNC) &_QPADMslack_sumArrayItems, 1},
    {"_QPADMslack_soloSumArrayItems", (DL_FUNC) &_QPADMslack_soloSumArrayItems, 1},
    {"_QPADMslack_paraSumArrayItems", (DL_FUNC) &_QPADMslack_paraSumArrayItems, 2},
    {"_QPADMslack_invertLongMatrixWithXk", (DL_FUNC) &_QPADMslack_invertLongMatrixWithXk, 4},
    {"_QPADMslack_invertShortMatrixWithXk", (DL_FUNC) &_QPADMslack_invertShortMatrixWithXk, 4},
    {"_QPADMslack_paraQPADMslackcpp", (DL_FUNC) &_QPADMslack_paraQPADMslackcpp, 11},
    {"_QPADMslack_threadedparaQPADMslackcpp", (DL_FUNC) &_QPADMslack_threadedparaQPADMslackcpp, 11},
    {"_QPADMslack_threadedSansJoinQPADMslackcpp", (DL_FUNC) &_QPADMslack_threadedSansJoinQPADMslackcpp, 11},
    {"_QPADMslack_asyncQPADMslackcpp", (DL_FUNC) &_QPADMslack_asyncQPADMslackcpp, 11},
    {"_QPADMslack_asyncSansGetQPADMslackcpp", (DL_FUNC) &_QPADMslack_asyncSansGetQPADMslackcpp, 11},
    {"_QPADMslack_QPADMslackcpp",     (DL_FUNC) &_QPADMslack_QPADMslackcpp,     10},
    {NULL, NULL, 0}
};

RcppExport void R_init_QPADMslack(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
